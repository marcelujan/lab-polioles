# tabs_tab6_rmn.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import io
from io import BytesIO
from datetime import datetime
import os
import base64
import zipfile
from tempfile import TemporaryDirectory
import matplotlib.pyplot as plt #solo para pruebas

# --- Configuraciones globales ---
GRUPOS_FUNCIONALES = ["Formiato", "Cloroformo", "C=C olef√≠nicos", "Glicerol medio", "Glicerol extremos", "Metil-√âster", "Eter", "Ester", "√Åcido carbox√≠lico", "OH", "Ep√≥xido", "C=C", "Alfa-C=O", "Alfa-C=C", "Vecino a alfa-carbonilo", "Alfa-ep√≥xido", "CH2", "CH3"]

def obtener_ids_espectros(nombre):
    return [doc.id for doc in firestore.Client().collection("muestras").document(nombre).collection("espectros").list_documents()]

def render_tab6(db, cargar_muestras, guardar_muestra, mostrar_sector_flotante):
    st.title("An√°lisis RMN")
    st.session_state["current_tab"] = "An√°lisis RMN"

    # --- Selecci√≥n de muestras ---
    muestras = cargar_muestras(db)
    if not muestras:
        st.info("No hay muestras cargadas.")
        st.stop()

    nombres_muestras = [m["nombre"] for m in muestras]
    muestras_sel = st.multiselect("Seleccionar muestras", nombres_muestras, default=[])
    if not muestras_sel:
        st.warning("Seleccion√° al menos una muestra.")
        st.stop()

    # --- Selecci√≥n de espectros por muestra ---
    espectros_sel = {}
    for muestra in muestras_sel:
        espectros_ref = db.collection("muestras").document(muestra).collection("espectros").stream()
        espectros = [doc.to_dict() for doc in espectros_ref]
        nombres_archivos = [e.get("nombre_archivo", "sin nombre") for e in espectros]
        espectros_sel[muestra] = st.multiselect(f"Espectros para {muestra}", nombres_archivos, default=nombres_archivos[:1])

    st.divider()

    # ==============================
    # === SECCI√ìN RMN 1H ===========
    # ==============================
    st.subheader("üî¨ RMN 1H")

    # --- M√°scara D/T2 ---
    activar_mascara = st.checkbox("M√°scara D/T2", value=False)
    usar_mascara = {}
    if activar_mascara:
        st.markdown("Activar sombreado individual por muestra:")
        cols = st.columns(len(muestras_sel))
        for idx, muestra in enumerate(muestras_sel):
            with cols[idx]:
                usar_mascara[muestra] = st.checkbox(muestra, key=f"chk_mask_{muestra}", value=False)

    # --- C√°lculo D/T2 ---
    activar_calculo_dt2 = st.checkbox("C√°lculo D/T2", value=False)
    if activar_calculo_dt2:
        st.info("Aqu√≠ ir√° la tabla editable de C√°lculo D/T2.")

    # --- Se√±ales pico bibliograf√≠a ---
    activar_picos = st.checkbox("Se√±ales Pico Bibliograf√≠a", value=False)
    if activar_picos:
        editar_tabla_biblio = st.checkbox("Editar Tabla Bibliogr√°fica", value=False)
        if editar_tabla_biblio:
            st.data_editor(
                pd.DataFrame(columns=["Grupo funcional", "X min", "Œ¥ pico", "X max", "Tipo de muestra", "Observaciones"]),
                use_container_width=True,
                num_rows="dynamic"
            )

    # --- Control de ejes del gr√°fico ---
    colx1, colx2, coly1, coly2 = st.columns(4)
    x_min = colx1.number_input("X m√≠nimo", value=0.0)
    x_max = colx2.number_input("X m√°ximo", value=10.0)
    y_min = coly1.number_input("Y m√≠nimo", value=0.0)
    y_max = coly2.number_input("Y m√°ximo", value=100.0)

    # --- Gr√°fico combinado ---
    fig, ax = plt.subplots(figsize=(8, 4))
    ax.set_title("Espectros RMN 1H")
    ax.set_xlabel("[ppm]")
    ax.set_ylabel("Se√±al")
    ax.set_xlim(x_min, x_max)
    ax.set_ylim(y_min, y_max)
    ax.axhline(y=0, color="black", linewidth=0.7)
    st.pyplot(fig)

    # ==============================
    # === C√°lculo de se√±ales =======
    # ==============================
    activar_calculo_senales = st.checkbox("C√°lculo de se√±ales", value=False)
    if activar_calculo_senales:
        st.info("Aqu√≠ ir√° la tabla editable de C√°lculo de se√±ales.")

    # ==============================
    # === RMN 13C ==================
    # ==============================
    st.subheader("üß™ RMN 13C")
    st.info("Aqu√≠ se graficar√°n los espectros RMN 13C seleccionados.")

    # ==============================
    # === Im√°genes RMN ============
    # ==============================
    st.subheader("üñºÔ∏è Espectros imagen")
    st.info("Aqu√≠ se mostrar√°n las im√°genes de espectros RMN.")